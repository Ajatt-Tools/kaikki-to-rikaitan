# https://github.com/softprops/action-gh-release/issues/616
name: Create a new release

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      target_languages: ${{ steps.load-languages.outputs.target_languages }}
      isos: ${{ steps.load-languages.outputs.isos }}
      calver: ${{ steps.tag.outputs.calver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Install npm dependencies
        run: npm install

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Tag the repository
        id: tag
        run: |
          # See https://docs.github.com/en/get-started/using-git/dealing-with-special-characters-in-branch-and-tag-names
          TAG=v$(  date '+%y.%m.%d'  )
          CALVER=$(  date '+%y.%m.%d'  )

          echo "$TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "calver=$CALVER" >> $GITHUB_OUTPUT

          git tag -a "$TAG" -m "Published version $TAG" ${GITHUB_SHA}
          git push origin "$TAG" || true

      - name: Load Languages
        id: load-languages
        run: |
          target_languages=$(jq '[.[] | .language]' languages.json | jq -c 'map(.)')
          echo "target_languages=$target_languages" >> $GITHUB_OUTPUT
          isos=$(jq -r '.[].iso' languages.json | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "isos=$isos" >> $GITHUB_OUTPUT

      - name: Generate markdown table
        id: generate_markdown
        run: |
          ./tools/generate-downloads-table.sh ${{ steps.tag.outputs.tag }}

      - name: Update recommended dictionaries
        id: update_dict_links
        run: |
          ./tools/update_recommended_dicts_links.sh ${{ steps.tag.outputs.tag }}

      - name: Create GitHub release (single)
        id: create_release
        uses: softprops/action-gh-release@v2.2.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ needs.prepare.outputs.calver || steps.tag.outputs.calver }}
          tag_name: ${{ steps.tag.outputs.tag }}
          prerelease: true
          generate_release_notes: true

      # https://github.com/peter-evans/create-pull-request
      - name: Create pull request if necessary
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Update downloads.md with list of .zip files"
          body: "This PR updates the downloads.md file with a table listing all .zip files."
          sign-commits: true
          delete-branch: true

  convert:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 18
      matrix:
        target_language: ${{ fromJson(needs.prepare.outputs.target_languages) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Create .env file
        run: |
          cp .env.example .env
          sed -i 's/^DICT_NAME=.*/DICT_NAME=kty/' .env

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Install gzip
        run: sudo apt-get install -y gzip

      - name: Find ISO code
        id: find_iso_code
        run: |
          target_iso=$(  jq --arg query "${{ matrix.target_language }}" -r '.[] | select(.language == $query) | .iso' -- languages.json  )
          if [[ -z $target_iso ]]; then
            echo "ERROR: can't find edition ISO" >&2
            exit 1
          fi
          echo "Edition ISO $target_iso"
          echo "target_iso=$target_iso" >> "$GITHUB_OUTPUT"

      - name: Run auto.sh script
        # Matrix edition is a full name (not ISO), e.g. Russian
        run: ./auto.sh "?" "?" "${{ matrix.target_language }}"
        env:
          TAG_NAME: ${{ needs.prepare.outputs.tag }}_${{ steps.find_iso_code.outputs.target_iso }}

      - name: Upload main dictionary files
        uses: softprops/action-gh-release@v2.2.1
        with:
          name: ${{ needs.prepare.outputs.calver }} - ${{ matrix.target_language }} Target
          tag_name: ${{ needs.prepare.outputs.tag }}_${{ steps.find_iso_code.outputs.target_iso }}
          prerelease: true
          generate_release_notes: true
          files: |
            data/language/**/kty-?*-?*.zip

      #- name: Upload index.json files
      #  uses: softprops/action-gh-release@v2.2.1
      #  with:
      #    token: ${{ secrets.GITHUB_TOKEN }}
      #    name: ${{ needs.prepare.outputs.calver }}
      #    tag_name: ${{ needs.prepare.outputs.tag }}
      #    prerelease: true
      #    generate_release_notes: true
      #    files: |
      #      data/language/**/kty-?*-?*-index.json

  merge-ipa:
    needs: ["prepare", "convert"]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 18
      matrix:
        target_language: ${{ fromJson(needs.prepare.outputs.target_languages) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install npm dependencies
        run: npm install

      - name: Find ISO code
        id: find_iso_code
        run: |
          target_iso=$(  jq --arg query "${{ matrix.target_language }}" -r '.[] | select(.language == $query) | .iso' -- languages.json  )
          if [[ -z $target_iso ]]; then
            echo "ERROR: can't find target ISO" >&2
            exit 1
          fi
          echo "TARGET ISO $target_iso"
          echo "target_iso=$target_iso" >> "$GITHUB_OUTPUT"

      - name: Download IPA dicts
        run: |
          mapfile -t iso_array < <(printf '%s' '${{ needs.prepare.outputs.isos }}' | jq -r '.[]')
          target_languages=$(printf '%s' '${{ needs.prepare.outputs.target_languages }}' | jq -r 'join(" ")')
          target_iso="${{ steps.find_iso_code.outputs.target_iso }}"

          __dl() {
              filename="kty-${1}-${2}-ipa.zip"
              if [ -f "$filename" ]; then
                  continue
              fi

              url="https://github.com/Ajatt-Tools/kaikki-to-rikaitan/releases/download/${{ needs.prepare.outputs.tag }}_${2}/$filename"
              curl -s -O -f -L "$url" || echo "Skipping $url due to an error."
          }

          for source_iso in "${iso_array[@]}"; do
            __dl "$source_iso" "$target_iso"
            __dl "$target_iso" "$source_iso"
          done

      - name: Run merge-ipa
        run: node merge-ipa.js
        env:
          TAG_NAME: ${{ needs.prepare.outputs.tag }}_${{ steps.find_iso_code.outputs.target_iso }}

      - name: Delete downloaded IPA files
        run: rm -f *.zip

      - name: Upload merged IPA dictionary files
        uses: softprops/action-gh-release@v2.2.1
        with:
          name: ${{ needs.prepare.outputs.calver }} - ${{ matrix.target_language }} Edition
          tag_name: ${{ needs.prepare.outputs.tag }}_${{ steps.find_iso_code.outputs.target_iso }}
          prerelease: true
          generate_release_notes: true
          # E.g. kty-sq-ipa.zip
          files: |
            data/language/**/kty-${{ steps.find_iso_code.outputs.target_iso }}-ipa.zip

      #- name: Upload index.json files
      #  uses: softprops/action-gh-release@v2.2.1
      #  with:
      #    name: ${{ needs.prepare.outputs.calver }}
      #    tag_name: ${{ needs.prepare.outputs.tag }}
      #    prerelease: true
      #    generate_release_notes: true
      #    files: "data/language/**/*-index.json"
